import{_ as p,r as i,o as c,c as l,a as s,b as n,d as e,w as t,f as o}from"./app.1ded8a6d.js";const r={},u=o('<h1 id="webhooks" tabindex="-1"><a class="header-anchor" href="#webhooks" aria-hidden="true">#</a> Webhooks</h1><p>The Members System support webhooks. You can register your webhook in the UI or via the API. Currently we only support changes for the &quot;person&quot; entity.</p><h2 id="menu" tabindex="-1"><a class="header-anchor" href="#menu" aria-hidden="true">#</a> Menu</h2><ul><li><a href="index">Home</a></li><li><a href="api-integration">API integration</a></li><li><a href="webhooks">Webhooks integration</a></li><li><a href="data-structures-and-scopes">Data Structures and Scopes</a></li><li><a href="single-sign-out">Single Sign Out</a></li></ul><h2 id="webhook-functionality-ui-and-api" tabindex="-1"><a class="header-anchor" href="#webhook-functionality-ui-and-api" aria-hidden="true">#</a> Webhook functionality (UI and API)</h2>',5),d=o(`<h2 id="using-the-ui" tabindex="-1"><a class="header-anchor" href="#using-the-ui" aria-hidden="true">#</a> Using the UI</h2><p><img src="https://user-images.githubusercontent.com/12196246/126508777-0de66d0e-d1ab-49dd-971d-40c71776ccc0.png" alt="image"></p><h6 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> URL</h6><p>The URL fields has to be a fully valid URL including the protocol (https), we don&#39;t add or remove anything when posting to this URL. This field is required.</p><p>NOTE: updating webhook endpoint URL may take up to 2 minutes in the system.</p><h6 id="signing-key" tabindex="-1"><a class="header-anchor" href="#signing-key" aria-hidden="true">#</a> Signing Key</h6><p>The signing key is used to create a hash of the body of the request. This gives you the ability to verify the origin of the HTTP POST This field is required.</p><h6 id="run-test" tabindex="-1"><a class="header-anchor" href="#run-test" aria-hidden="true">#</a> Run Test</h6><p>When implementing your webhook endpoint it might be nice to test it every now and then to make sure everything is on track. You can use the &quot;Run Test&quot; method for this. When you click this button we will take the currently logged in user and POST it to your webhook.</p><h6 id="sync-data" tabindex="-1"><a class="header-anchor" href="#sync-data" aria-hidden="true">#</a> Sync Data</h6><p>When you click on &quot;Sync Data&quot; we will make sure to push all the persons your application have access to to your webhook. This might overload your system. The <code>Request interval for data sync</code> setting is there to prevent that, if you give this setting a value we will make sure not to POST requests more frequent than what the value indicates. If the value is 0, we will POST requests to your webhook as fast as our system can scale.</p><h2 id="using-the-api" tabindex="-1"><a class="header-anchor" href="#using-the-api" aria-hidden="true">#</a> Using the API</h2><h6 id="url-1" tabindex="-1"><a class="header-anchor" href="#url-1" aria-hidden="true">#</a> URL</h6><p>Update <code>Webhook url</code> for application X. <em>(In order to remove the webhook set url to empty string)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;node-fetch&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
       <span class="token keyword">let</span> updatedField <span class="token operator">=</span> <span class="token punctuation">{</span>
           <span class="token literal-property property">webhook</span><span class="token operator">:</span> <span class="token punctuation">{</span>
               <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://someurl.com/something&#39;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">let</span> httpResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.members.bcc.no/application/{APPLICATION-ID}&#39;</span><span class="token punctuation">,</span>
           <span class="token punctuation">{</span>
               <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;patch&#39;</span><span class="token punctuation">,</span>
               <span class="token literal-property property">headers</span><span class="token operator">:</span>
                   <span class="token punctuation">{</span>   <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
                       <span class="token string-property property">&#39;x-access-token&#39;</span><span class="token operator">:</span><span class="token string">&#39;API-KEY-HERE&#39;</span>
                   <span class="token punctuation">}</span><span class="token punctuation">,</span>
               <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>updatedField<span class="token punctuation">)</span>
           <span class="token punctuation">}</span><span class="token punctuation">)</span>

       <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> httpResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Updated the webhook url via API&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>webhook<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NOTE: updating webhook endpoint URL may take up to 2 minutes in the system.</p><h6 id="signing-key-1" tabindex="-1"><a class="header-anchor" href="#signing-key-1" aria-hidden="true">#</a> Signing Key</h6><p>Update <code>Signing Key</code> for application X</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;node-fetch&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> updatedField <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">webhook</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">signingKey</span><span class="token operator">:</span> <span class="token string">&#39;helloWorld&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> httpResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>
        <span class="token string">&#39;https://api.members.bcc.no/application/{APPLICATION-ID}&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;patch&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
                <span class="token string-property property">&#39;x-access-token&#39;</span><span class="token operator">:</span> <span class="token string">&#39;API-KEY-HERE&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>updatedField<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> httpResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Updated the signing key via API&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>webhook<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="run-test-1" tabindex="-1"><a class="header-anchor" href="#run-test-1" aria-hidden="true">#</a> Run Test</h6><p>Trigger a <code>webhook test</code> for application X <br><em>Code snippet coming soon</em></p><h6 id="sync-data-1" tabindex="-1"><a class="header-anchor" href="#sync-data-1" aria-hidden="true">#</a> Sync Data</h6><p>Trigger a <code>full sync</code> for application X <br><em>Code snippet coming soon</em></p><h2 id="implementing-webhooks-in-your-app" tabindex="-1"><a class="header-anchor" href="#implementing-webhooks-in-your-app" aria-hidden="true">#</a> Implementing webhooks in your app</h2><p>To properly receive webhook messages in your application some preparation is needed. Here you can find most important information on that topic.</p><h3 id="confirming-that-webhook-endpoint-is-properly-exposed" tabindex="-1"><a class="header-anchor" href="#confirming-that-webhook-endpoint-is-properly-exposed" aria-hidden="true">#</a> Confirming that webhook endpoint is properly exposed</h3><p>For Members Webhooks to properly deliver messages, endpoint specified in Members UI/API must be a publicly accessible HTTPS address. The server for the push endpoint must have a valid SSL certificate signed by a certificate authority. If all these requirements are fulfilled endpoint should be able to receive requests.</p><h3 id="receiving-messages" tabindex="-1"><a class="header-anchor" href="#receiving-messages" aria-hidden="true">#</a> Receiving messages</h3><p>When Members Webhooks delivers a message to a push endpoint, Members Webhooks sends the message in the body of a POST request. The body of the request is a JSON object and the message data is in the message.data field. The message data is base64-encoded.</p><p>Following is an example of message issued by Members Webhook:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;attributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;hash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HashOfData&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>updatedPersonScopedData<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;messageId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2070443601311540&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;message_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2070443601311540&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;publishTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2021-02-26T19:13:55.749Z&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;publish_time&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2021-02-26T19:13:55.749Z&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token property">&quot;subscription&quot;</span><span class="token operator">:</span> <span class="token string">&quot;idOfASubscription&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),k=s("code",null,"message.data",-1),h=s("code",null,"updatedPersonScopedData",-1),m=o(`<h3 id="order-of-operation-while-receiving-message" tabindex="-1"><a class="header-anchor" href="#order-of-operation-while-receiving-message" aria-hidden="true">#</a> Order of operation while receiving message</h3><ol><li>Decode message data from Base64 to plain string.</li><li>Calculate hash from plain string of data and output it as base64 encoded string.</li><li>Compare calculated hash with one send in message attributes.</li><li>Deserialize plain string data to object.</li></ol><h3 id="signing-key-2" tabindex="-1"><a class="header-anchor" href="#signing-key-2" aria-hidden="true">#</a> Signing key</h3><p>Alongside message data of POST Request Members Webhook sends <code>hash</code> attribute. This is base64-encoded string containing SHA256 HMAC of stringified message data using singingKey from Webhook configuration for your app. Only Members and your application knows this secret, so you can use it to verify integrity of message data.</p><p>To sign message code like this is used:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">signMessage</span><span class="token punctuation">(</span>personData<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> signingKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>createHmac<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;crypto&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">&#39;sha256&#39;</span><span class="token punctuation">,</span> signingKey<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>personData<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To check validity of message data replicate code above and compare both hashes. If they do not match, message data was tampered with.</p><h3 id="deserializing-message-data" tabindex="-1"><a class="header-anchor" href="#deserializing-message-data" aria-hidden="true">#</a> Deserializing message data</h3><p>Message data is Base64-encoded and must be decoded first.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/message-subscriber&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> message <span class="token operator">=</span> req<span class="token punctuation">.</span>body <span class="token operator">?</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>message <span class="token operator">:</span> <span class="token keyword">null</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> data <span class="token operator">=</span> buffer <span class="token operator">?</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received message </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token punctuation">.</span>messageId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Data: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token number">204</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="confirming-message" tabindex="-1"><a class="header-anchor" href="#confirming-message" aria-hidden="true">#</a> Confirming message</h3><p>After you receive a push request, return an HTTP status code. To acknowledge the message, return one of the following status codes:</p><ul><li>102</li><li>200</li><li>201</li><li>202</li><li>204</li></ul><p>Your application has by default 600 seconds to acknowledge message.</p><p>To send a negative acknowledgement for the message, return any other status code. If you send a negative acknowledgement or the acknowledgement deadline expires, Members Webhooks resends the message. Webhook will continue to resend unacknowledged message with increasing interval (from 10 to 600 seconds) and will stop resending after 7 days. This means that if you encounter a permanent error that you know will not be fixed (for example updating an unknown user and you refuse to create new users), you should acknowledge the message, otherwise you will receive it again and again!</p><p>You can&#39;t modify the acknowledgement deadline of individual messages that you receive from push subscriptions.</p>`,16);function g(v,b){const a=i("RouterLink");return c(),l("div",null,[u,s("p",null,[n("To access your application please see the "),e(a,{to:"/_products/bcc-membership-docs/"},{default:t(()=>[n("Getting Started")]),_:1}),n(" guid and the "),e(a,{to:"/_products/bcc-membership-docs/webhooks.html"},{default:t(()=>[n("Webhooks integration")]),_:1}),n(" guide.")]),d,s("p",null,[n("where "),k,n(" is an array and "),h,n(" is PersonDetails entity with removed properties according to scopes approved. PersonDetails schema can be found in "),e(a,{to:"/_products/bcc-membership-docs/data-structures-and-scopes.html"},{default:t(()=>[n("Data Structures and Scopes")]),_:1})]),m])}const f=p(r,[["render",g],["__file","webhooks.html.vue"]]);export{f as default};
