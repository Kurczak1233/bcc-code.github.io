import{_ as r,r as i,o as s,c as d,a as t,b as e,d as n,f as c}from"./app.1ded8a6d.js";const a={},h=t("h1",{id:"bcc-events",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#bcc-events","aria-hidden":"true"},"#"),e(" BCC Events")],-1),p={href:"https://cloudevents.io",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/protocolbuffers/protobuf",target:"_blank",rel:"noopener noreferrer"},b=c('<p>See <a href="proto">proto/README.md</a> for more information about the messages used to describe CloudEvents.</p><h1 id="cloud-pubsub" tabindex="-1"><a class="header-anchor" href="#cloud-pubsub" aria-hidden="true">#</a> Cloud PubSub</h1><p>Since most of our application are hosted in Google we use Cloud PubSub for publishing and subscribing cloud events.</p><h2 id="naming-conventions" tabindex="-1"><a class="header-anchor" href="#naming-conventions" aria-hidden="true">#</a> Naming conventions</h2><h3 id="topic" tabindex="-1"><a class="header-anchor" href="#topic" aria-hidden="true">#</a> Topic</h3><p><code>[service]-topic</code> (e.g. contribution-topic, membership-topic, event-topic)</p><h3 id="subscription" tabindex="-1"><a class="header-anchor" href="#subscription" aria-hidden="true">#</a> Subscription</h3><p><code>[publishing service]-[subscrybent service]-sub</code> (e.g. membership-contribution-sub, membership-event-sub)</p><p>A subscription needs to be unique per PubSub.</p><h1 id="cloudevents-in-this-repository" tabindex="-1"><a class="header-anchor" href="#cloudevents-in-this-repository" aria-hidden="true">#</a> CloudEvents in this repository</h1><p>This repository contains definitions for the following CloudEvents:</p><table><thead><tr><th>Service</th><th>Schemas</th><th>PubSub Topic</th><th>Types</th></tr></thead><tbody><tr><td>Contribution Registry</td><td><a href="proto/events/contribution/registry/v1/events.proto">Proto</a></td><td>contribution-topic</td><td>CloudEvent Type: <code>bccCode.events.contribution.registry.v1.ContributionCreatedEvent</code> <code>bccCode.events.contribution.registry.v1.ContributionDeletedEvent</code></td></tr><tr><td>Competency Registry</td><td><a href="proto/events/contribution/competencyRegistry/v1/events.proto">Proto</a></td><td>contribution-topic</td><td>CloudEvent Type: <code>bccCode.events.contribution.competencyRegistry.v1.ObjectCreatedEvent</code></td></tr><tr><td>Person Administration</td><td><a href="proto/events/membership/personAdministration/v1/events.proto">Proto</a></td><td>membership-topic</td><td>CloudEvent Type: <code>bccCode.events.membership.admin.person.v1.PersonRevokedEvent</code></td></tr><tr><td>Event Registration</td><td><a href="proto/events/event/registration/v1/events.proto">Proto</a></td><td>event-topic</td><td>CloudEvent Type: <code>bccCode.events.event.registration.v1.PersonRegisteredEvent</code></td></tr></tbody></table>',12);function v(l,f){const o=i("ExternalLinkIcon");return s(),d("div",null,[h,t("p",null,[e("This repository contains types for "),t("a",p,[e("CloudEvents"),n(o)]),e(" issued by BCC.")]),t("p",null,[e('The "source of truth" for the event data format is in the form of '),t("a",u,[e("Google Protocol Buffers"),n(o)]),e(".")]),b])}const g=r(a,[["render",v],["__file","index.html.vue"]]);export{g as default};
