import{_ as s,r as n,o as r,c as i,a as e,b as t,d as a,f as c}from"./app.1ded8a6d.js";const d={},l=e("h1",{id:"bcc-platform-events-proto-schema",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bcc-platform-events-proto-schema","aria-hidden":"true"},"#"),t(" BCC Platform Events proto schema")],-1),p={href:"https://cloudevents.io",target:"_blank",rel:"noopener noreferrer"},h=c('<h2 id="relationship-between-protobuf-messages-and-cloudevent-types" tabindex="-1"><a class="header-anchor" href="#relationship-between-protobuf-messages-and-cloudevent-types" aria-hidden="true">#</a> Relationship between protobuf messages and CloudEvent types</h2><p>There are two protobuf messages that are relevant for any given CloudEvent type:</p><p>The &quot;envelope&quot; message (e.g. <code>ObjectCreatedEvent</code>) representing the complete CloudEvent, including any extension attributes. The &quot;data&quot; message (e.g. <code>ContributionObjectData</code>) There is a 1:1 relationship between CloudEvent types and envelope messages, but a many:1 relationship between CloudEvent types and data messages. In other words, many CloudEvent types can use the same data message. For example, every event associated with something happening to a Contribution object uses ContributionObjectData as the data message. Each envelope message specifies the CloudEvent type it&#39;s associated with via a proto annotation.</p><p>Note that each proto package is versioned, but this version is independent of any API version. It would be possible for a single API version to support multiple event versions, or vice versa.</p><p>Our convention for event types is to have a dot-separated list of the following values, in the order:</p><ul><li><code>bccCode</code> (always)</li><li>product (eg. <code>core</code>, <code>contirbution</code>, <code>membership</code>)</li><li>resource (eg. <code>person</code>, <code>registry</code>)</li><li>version (eg. <code>v1</code>)</li><li>action (e.g. <code>created</code>, <code>revoked</code>)</li></ul><p>The &quot;action&quot; is the action that causes the event to be emitted.</p><p>The proto package (in the <code>package</code> part of each .proto file) must be <code>bccCode.events</code>.product<code>.</code>version. The .proto files should be in a directory structure where each element of the package name corresponds to a directory. The envelope messages must be in a file named <code>events.proto</code>, and the data messages (including any messages they refer to) must be in a file named <code>data.proto</code>. The purpose of this separation is to allow the envelope and data messages to coexist, but for consumer libraries to be generated that only contain the data messages.</p><p>As a complete example, consider the event that is created when a Contribution object is created:</p><ul><li>Proto files: <code>bccCode/events/contribution/registry/v1/events.proto</code> and <code>bccCode/events/contribution/registry/v1/data.proto</code></li><li>Envelope message: <code>bccCode.events.contribution.registry.v1.ObjectCreatedEvent</code></li><li>Data message: <code>bccCode.events.contribution.registry.v1.ContributionObjectData</code></li><li>Event type: <code>bccCode.cloud.contribution.object.v1.created</code></li></ul><p>Note that the <code>events</code> part of the proto package is not part of the CloudEvent type, for brevity. It&#39;s included in the proto package to distinguish event message from those used in APIs.</p><h2 id="message-naming-conventions" tabindex="-1"><a class="header-anchor" href="#message-naming-conventions" aria-hidden="true">#</a> Message naming conventions</h2><p>While not required for technical correctness, we use a suffix of &quot;Event&quot; for all envelope messages, and a suffix of &quot;Data&quot; for all event data messages.</p><p>We avoid the use either &quot;Event&quot; or &quot;Data&quot; as a suffix for messages which aren&#39;t envelope messages or event data messages.</p><h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h2>',15),u={href:"https://developers.google.com/protocol-buffers/docs/proto3",target:"_blank",rel:"noopener noreferrer"};function v(m,g){const o=n("ExternalLinkIcon");return r(),i("div",null,[l,e("p",null,[t("The protos within this directory hierarchy represent the data within events generated by BCC Platform eventing infrastructure, usually represented as the data attribute within a "),e("a",p,[t("CloudEvent"),a(o)]),t(". They are provided as machine-readable schemas, allowing libraries of data types to be created to make it easier to consume events.")]),h,e("ul",null,[e("li",null,[e("a",u,[t("Protocol Buffers Language Guid(proto3)"),a(o)])])])])}const f=s(d,[["render",v],["__file","index.html.vue"]]);export{f as default};
